unset shellHook
PATH=${PATH:-}
nix_saved_PATH="$PATH"
XDG_DATA_DIRS=${XDG_DATA_DIRS:-}
nix_saved_XDG_DATA_DIRS="$XDG_DATA_DIRS"
AR='ar'
export AR
AS='as'
export AS
BASH='/nix/store/0rwyq0j954a7143p0wzd4rhycny8i967-bash-5.2-p15/bin/bash'
CC='gcc'
export CC
CONFIG_SHELL='/nix/store/0rwyq0j954a7143p0wzd4rhycny8i967-bash-5.2-p15/bin/bash'
export CONFIG_SHELL
CXX='g++'
export CXX
HOSTTYPE='x86_64'
HOST_PATH='/nix/store/wb72mw9wrksm44cvf0s64rn3cam9cwai-R-4.2.3/bin:/nix/store/w8vm09hri2zz7yacryzzzxvsapik4ps4-coreutils-9.1/bin:/nix/store/4cxs4cigh2zdxvma52ygm3mh2igq70iw-findutils-4.9.0/bin:/nix/store/vikpb6rhmi8zzgsx8syjng9dic8dplm7-diffutils-3.9/bin:/nix/store/4mca20b13q88s6llkr8mc468rh9l9bmr-gnused-4.9/bin:/nix/store/b4in4hmq54h6l34a0v6ha40z97c0lzw2-gnugrep-3.7/bin:/nix/store/p7v8rc82yi4zngjw2z7isgqvfi32l1aj-gawk-5.2.1/bin:/nix/store/2gcfy5f68y7gkryp3wrjmvlci42qb61a-gnutar-1.35/bin:/nix/store/5xzh0z66hpcd3k578my76lx4qgra334q-gzip-1.12/bin:/nix/store/6d9vlwwy7kvxjqmqg4cldgg9mr8nflff-bzip2-1.0.8-bin/bin:/nix/store/qlcm8dzsaa6wyycmx7in8rz6x3pzf6zf-gnumake-4.4.1/bin:/nix/store/0rwyq0j954a7143p0wzd4rhycny8i967-bash-5.2-p15/bin:/nix/store/0g52i0ih3h0d9s40m84gksi2jjm4k3bf-patch-2.7.6/bin:/nix/store/agry2lhy6ilgyacx75w2ycqsdfwr513f-xz-5.4.3-bin/bin:/nix/store/rgg874xkzlfmkzkm7911dwnihswkf54g-file-5.44/bin'
export HOST_PATH
IFS=' 	
'
IN_NIX_SHELL='impure'
export IN_NIX_SHELL
LD='ld'
export LD
LINENO='76'
MACHTYPE='x86_64-pc-linux-gnu'
NIX_BINTOOLS='/nix/store/syp0507hrby53pprfi7n4wppms3b7ba2-binutils-wrapper-2.40'
export NIX_BINTOOLS
NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu='1'
export NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu
NIX_BUILD_CORES='16'
export NIX_BUILD_CORES
NIX_CC='/nix/store/3hbxw05vfs6m1155xa6pvribs3bv777n-gcc-wrapper-12.2.0'
export NIX_CC
NIX_CC_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu='1'
export NIX_CC_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu
NIX_CFLAGS_COMPILE=' -frandom-seed=ypynpnnssx'
export NIX_CFLAGS_COMPILE
NIX_ENFORCE_NO_NATIVE='1'
export NIX_ENFORCE_NO_NATIVE
NIX_HARDENING_ENABLE='fortify stackprotector pic strictoverflow format relro bindnow'
export NIX_HARDENING_ENABLE
NIX_LDFLAGS='-rpath /data/home/fabian/Projects/NixOS/nixos-config/shells/r-env/outputs/out/lib64 -rpath /data/home/fabian/Projects/NixOS/nixos-config/shells/r-env/outputs/out/lib '
export NIX_LDFLAGS
NIX_LIB64_IN_SELF_RPATH='1'
NIX_NO_SELF_RPATH='1'
NIX_STORE='/nix/store'
export NIX_STORE
NM='nm'
export NM
OBJCOPY='objcopy'
export OBJCOPY
OBJDUMP='objdump'
export OBJDUMP
OLDPWD=''
export OLDPWD
OPTERR='1'
OSTYPE='linux-gnu'
PATH='/nix/store/gwf21xyl0x0bhgapi66avzf6qmddr44s-patchelf-0.15.0/bin:/nix/store/3hbxw05vfs6m1155xa6pvribs3bv777n-gcc-wrapper-12.2.0/bin:/nix/store/jgdz5wfqc6q6qhy17lsqnfpbkfi1fcar-gcc-12.2.0/bin:/nix/store/sb5sf8pnbb5dxgr5p8qm344ky8k7f62r-glibc-2.37-45-bin/bin:/nix/store/w8vm09hri2zz7yacryzzzxvsapik4ps4-coreutils-9.1/bin:/nix/store/syp0507hrby53pprfi7n4wppms3b7ba2-binutils-wrapper-2.40/bin:/nix/store/3r87a2wq1w4l66wnsm7rqvy608mx23h6-binutils-2.40/bin:/nix/store/wb72mw9wrksm44cvf0s64rn3cam9cwai-R-4.2.3/bin:/nix/store/w8vm09hri2zz7yacryzzzxvsapik4ps4-coreutils-9.1/bin:/nix/store/4cxs4cigh2zdxvma52ygm3mh2igq70iw-findutils-4.9.0/bin:/nix/store/vikpb6rhmi8zzgsx8syjng9dic8dplm7-diffutils-3.9/bin:/nix/store/4mca20b13q88s6llkr8mc468rh9l9bmr-gnused-4.9/bin:/nix/store/b4in4hmq54h6l34a0v6ha40z97c0lzw2-gnugrep-3.7/bin:/nix/store/p7v8rc82yi4zngjw2z7isgqvfi32l1aj-gawk-5.2.1/bin:/nix/store/2gcfy5f68y7gkryp3wrjmvlci42qb61a-gnutar-1.35/bin:/nix/store/5xzh0z66hpcd3k578my76lx4qgra334q-gzip-1.12/bin:/nix/store/6d9vlwwy7kvxjqmqg4cldgg9mr8nflff-bzip2-1.0.8-bin/bin:/nix/store/qlcm8dzsaa6wyycmx7in8rz6x3pzf6zf-gnumake-4.4.1/bin:/nix/store/0rwyq0j954a7143p0wzd4rhycny8i967-bash-5.2-p15/bin:/nix/store/0g52i0ih3h0d9s40m84gksi2jjm4k3bf-patch-2.7.6/bin:/nix/store/agry2lhy6ilgyacx75w2ycqsdfwr513f-xz-5.4.3-bin/bin:/nix/store/rgg874xkzlfmkzkm7911dwnihswkf54g-file-5.44/bin'
export PATH
PS4='+ '
RANLIB='ranlib'
export RANLIB
READELF='readelf'
export READELF
R_LIBS_SITE='/nix/store/r6rg7g777b55vnf9n0i3kznwapra0b1m-r-GenomicRanges-1.50.2/library:/nix/store/7phnnbf3339z3d4w0hhkwslingkyw1hq-r-BiocGenerics-0.44.0/library:/nix/store/1s4fk4v98wz6xrzgpflps40c9m923nlh-r-GenomeInfoDb-1.34.9/library:/nix/store/97m55gx26ih10wwfxy9fvks1yk3brjqr-r-GenomeInfoDbData-1.2.9/library:/nix/store/5lcr0xa6r8l8pv9abfsz2b99b7zbr078-r-IRanges-2.32.0/library:/nix/store/yf5c5r2l3gqipqig3digqr7nvp4lbkcz-r-S4Vectors-0.36.2/library:/nix/store/57wv3i8i9vxmj2d232rhpbw0qcygn50r-r-RCurl-1.98-1.12/library:/nix/store/lvrb284rf4k3bcsfck6yi0c4lgifcnji-r-bitops-1.0-7/library:/nix/store/ca0gn0vb74hz2gsxs7paxnwzbxgpksp2-r-XVector-0.38.0/library:/nix/store/hyw8czlnvjfvfz635nl3szxrkmrajva3-r-zlibbioc-1.44.0/library:/nix/store/v2csb61wlvjc6rf73xl13nyf86ij7rwm-r-doParallel-1.0.17/library:/nix/store/xphmw9lknj95va9pabhs9d55cy6hq2fm-r-foreach-1.5.2/library:/nix/store/f0bklhd4v4szprv8k9xhq49c3gwk5rdh-r-codetools-0.2-19/library:/nix/store/gslj3fbfhygkx1p7bmvrl1mzcry6snbr-r-iterators-1.0.14/library:/nix/store/njkn98jsxzv896z9cck003xysahkfny4-r-plyranges-1.18.0/library:/nix/store/6mln4wxz44jq729qn6py7wkk4bs46bhb-r-dplyr-1.1.1/library:/nix/store/78ylfww5n134i8dsb25qvs5923x8mc9g-r-cli-3.6.1/library:/nix/store/dpv7cvdanpfhqvxbypgpvvl3d9nf12f1-r-generics-0.1.3/library:/nix/store/87nf146mpv9wwbzy0bjl2dx9yiswg6xf-r-glue-1.6.2/library:/nix/store/7l1pjy36v49v9j0gk78wxdsxk4vs8i6q-r-lifecycle-1.0.3/library:/nix/store/087gcybpvdijyjrr0mzdxqdhz41jg6yd-r-rlang-1.1.0/library:/nix/store/wsw0kjvz5iyvgpvc6i9y6a91gbzl956x-r-magrittr-2.0.3/library:/nix/store/kidyhv9lqdynraxa1swnvcfkjhvlvdj1-r-pillar-1.9.0/library:/nix/store/z178xl90fwd1fqsb4dgjqnqil9i742ar-r-fansi-1.0.4/library:/nix/store/chdjg7k0qqhqf5h2m3wl7hfii27knwn8-r-utf8-1.2.3/library:/nix/store/rk2ydwd7jpvm7mr2908q77jf5bay6760-r-vctrs-0.6.1/library:/nix/store/8rfbiz2v1dahxbqjvadxhgsrwmpkmwgq-r-R6-2.5.1/library:/nix/store/xjbfka0qw5plkzlkqhcmnmw2525y2m31-r-tibble-3.2.1/library:/nix/store/0v0jcvz11s78mm0v2xz4783dyl7vw2wz-r-pkgconfig-2.0.3/library:/nix/store/pr838svb7ys7vdp77h6iq60p9alf9lav-r-tidyselect-1.2.0/library:/nix/store/cpm0j787mlljv62ydq271fcrqpfra06w-r-withr-2.5.0/library:/nix/store/530p86g9dylqr3wfajr607zj8h06v0s2-r-GenomicAlignments-1.34.1/library:/nix/store/ngfqssam8v3s24si7may9j78986d8ahy-r-BiocParallel-1.32.6/library:/nix/store/vq2gwyqn6bcsdd3p40zjx1d07il69ghx-r-BH-1.81.0-1/library:/nix/store/9dddh8hignyinfni43j7ygc0j3lbvp2v-r-cpp11-0.4.3/library:/nix/store/k130sv89s8l3ya6ql5d62m7gs1ygmfb9-r-futile.logger-1.4.3/library:/nix/store/vp1xinawm0xhk4pkf87x8dcyk7aqgkfk-r-futile.options-1.0.1/library:/nix/store/w44icrf5c0wgfkgqfi5wbqca3334fzmx-r-lambda.r-1.2.4/library:/nix/store/whjv79zj3fdiqq9av48b4xp1f0k6v25q-r-formatR-1.14/library:/nix/store/aclpz71l0ph4x2r5crzh1fj751j315ip-r-snow-0.4-4/library:/nix/store/25xxvm9zrz92qyiz5nnpaqf3npzl45j4-r-Biostrings-2.66.0/library:/nix/store/jp4b5fjgbs944y3g651r50vsqgig2020-r-crayon-1.5.2/library:/nix/store/5kxlkdvv3mvvymzlmjcgmk0fkr6cbapn-r-Rsamtools-2.14.0/library:/nix/store/l5zflcc04fnbkk3cn3c7apac7r46jj79-r-Rhtslib-2.0.0/library:/nix/store/s2waqj36sw7bxn8bm3chijdnisl0yqlk-r-SummarizedExperiment-1.28.0/library:/nix/store/1j12p07qan4m2wmkv3m7363k9jcan52k-r-Biobase-2.58.0/library:/nix/store/313qv3snr4j914v1hlsz8f0pyqd4airk-r-DelayedArray-0.24.0/library:/nix/store/wdajm7mbws9asvmkhanws47icd8bwhwa-r-Matrix-1.5-4/library:/nix/store/ligcnp3rv5rlrixr00zgcvyz7xqfqa6x-r-lattice-0.21-8/library:/nix/store/y6pj1wifn03r338cnp1dfgzmzwvc5lbd-r-MatrixGenerics-1.10.0/library:/nix/store/dy96sz80vsngr0lifs8xwh0qxx21xjx3-r-matrixStats-0.63.0/library:/nix/store/6bxwcawmyp0ss636yzi3fxzq0jxw425k-r-rtracklayer-1.58.0/library:/nix/store/zqqk703jhrxx01c7zvj7pvy1srd4zg21-r-BiocIO-1.8.0/library:/nix/store/7fcg563q2f2njfs8r1r33fbv9q4rgwrm-r-restfulr-0.0.15/library:/nix/store/vzs179p48h10v2jjm9j858kflcwni7z5-r-rjson-0.2.21/library:/nix/store/zl3kvdii4y7vmrmmxv7mmlz3fznmxvi9-r-XML-3.99-0.14/library:/nix/store/9s69hbgdx4ghrr3nl42fzpwz0b1jn38q-r-yaml-2.3.7/library:/nix/store/agc6vihmxkj8vpz4kvpj5pcp93szxljw-r-tidyverse-2.0.0/library:/nix/store/zmb5rzkfssnjlc0q0gh9k11i07yd8daa-r-broom-1.0.4/library:/nix/store/cfkfajd0gda2lzg7q7hncv7iis972y47-r-backports-1.4.1/library:/nix/store/p07gmj86a3i37qkhv6hpcykmf4asczbd-r-ellipsis-0.3.2/library:/nix/store/a3cv0782vk0yn2k8a33ylpchidmp6y2v-r-purrr-1.0.1/library:/nix/store/q2pvfnqybarwkk0rm0wxvj83s6f9v31m-r-stringr-1.5.0/library:/nix/store/9rlygpnhn6qdl8cj6ag1lyqvhqqrqqf0-r-stringi-1.7.12/library:/nix/store/p0jvpxzrars3vsr3pkv1jx154nhiy8zy-r-tidyr-1.3.0/library:/nix/store/c3pkgaq7d90q1jcjs7n8wr7fj08q6ng7-r-conflicted-1.2.0/library:/nix/store/p4nlq548fj10bkkd2bri6miiiyh3f7d8-r-memoise-2.0.1/library:/nix/store/dxaqzklaa8zrlzwdq955nbapyp2bhbj1-r-cachem-1.0.7/library:/nix/store/4ay5q821wcl6yifrc23jr9qc8mips9fw-r-fastmap-1.1.1/library:/nix/store/va9mnl6b1k54k5ksgam560mx3xlsacnp-r-dbplyr-2.3.2/library:/nix/store/mijw2axndmijrracqcz83zyw7m42sgb6-r-blob-1.2.4/library:/nix/store/pa6ycgrc64vdd5jsrljpvfpm284z2xi5-r-DBI-1.1.3/library:/nix/store/3sij3i326rcs0ms31bf3qgvb5gdk4v69-r-dtplyr-1.3.1/library:/nix/store/idkzwglsk0hvmlpz9r5frmsyz5fkjgk6-r-data.table-1.14.8/library:/nix/store/jkyjc40wpmqcm3djibnqmxpj10lw231y-r-forcats-1.0.0/library:/nix/store/jhimw5g66lqrkdpjqss2dn4vcrrrh6mq-r-ggplot2-3.4.2/library:/nix/store/cfc27d34lvr45j46nk50jc85l58rywmb-r-gtable-0.3.3/library:/nix/store/643yiqgf123ygndabzfpsa5ybg4087c1-r-isoband-0.2.7/library:/nix/store/zzq3m3z51nmryg6zx1r5h2ahl1sqhdgy-r-MASS-7.3-58.3/library:/nix/store/iv7m86zs8ak8xqr2h9rs0mmrbxsridvc-r-mgcv-1.8-42/library:/nix/store/xq7agmqvk03hmdqvs3f3gql36agvwh40-r-nlme-3.1-162/library:/nix/store/r72vcxql65hwna0gn39zlpflsb8imdcr-r-scales-1.2.1/library:/nix/store/512p9xkg4nckm2pql9sajgfami3fbxrx-r-farver-2.1.1/library:/nix/store/5gcravmmcdvdqw5ba8mrk645w1d3as0l-r-labeling-0.4.2/library:/nix/store/ypcxc5225pckzrhz7yid5sry2ax060l3-r-munsell-0.5.0/library:/nix/store/6ykif6hkjdmwx9jzmgf0k4izxnl9fw7a-r-colorspace-2.1-0/library:/nix/store/jqdp5r74zsxlcmv9zvkxskhyriyxm8jg-r-RColorBrewer-1.1-3/library:/nix/store/2xzrmxjn8x6l2vql2h93fpyk3bn97j68-r-viridisLite-0.4.1/library:/nix/store/68fdairwkmpv1680d7x4wm8536la9rgr-r-googledrive-2.1.0/library:/nix/store/mxn295w33d6b656ch47vjai7651na99a-r-gargle-1.3.0/library:/nix/store/0z999z6hxwr8ra5qhl630gc6n0p355bp-r-fs-1.6.1/library:/nix/store/f10xrrvnpx22v23pwwkrs2fh9z8cddxv-r-httr-1.4.5/library:/nix/store/kfq3rsm1f6m2nbf30xvmsa0yxmw5ja8z-r-curl-5.0.0/library:/nix/store/7dzfb4a88n0d20d776jfwf50mxda40y0-r-jsonlite-1.8.4/library:/nix/store/rrrr8qr8mr67rff5fn4x7n2b21fp2krq-r-mime-0.12/library:/nix/store/ybksyzs32f67pgcpppf6xskxbzjd8n5d-r-openssl-2.0.6/library:/nix/store/zbpaw78hnlfh2xvdqrs5zsn52mpsv3sa-r-askpass-1.1/library:/nix/store/nz12y24yjqgy02ina6gksldimbvpcz6z-r-sys-3.4.1/library:/nix/store/ln9pbraidj716dnbvsrjvfcy9did4316-r-rappdirs-0.3.3/library:/nix/store/a1p6rnwlz1n01sikgj1ka9iwybf66g3w-r-rstudioapi-0.14/library:/nix/store/ay6fkh045kjw8ir5nrhhyr1xblbwm36p-r-uuid-1.1-0/library:/nix/store/1dhl070j7gq0nl9ld7icrspw2b9hqsnl-r-googlesheets4-1.1.0/library:/nix/store/f49z6kp63hlfn48sw48jngii9ky2060r-r-cellranger-1.1.0/library:/nix/store/bxkbvhck8cwkkbps5l6h8f9qcx6f90mm-r-rematch-1.0.1/library:/nix/store/fgi9cii71x3p9q0x3cqlc6ad39ndj1hy-r-ids-1.0.1/library:/nix/store/cq7xd806krcck5rdj6crb435ak2crjgk-r-rematch2-2.1.2/library:/nix/store/c3cri4pjkzcfz71bv1sgfrq6jdh39i6v-r-haven-2.5.2/library:/nix/store/zzv5s5vy299a4yrcszkzyrxr0nfwfxy7-r-hms-1.1.3/library:/nix/store/dhac9dbd26m1jianvja6vs53jr7is8bp-r-readr-2.1.4/library:/nix/store/j7da977bpmvs3q6g8i03aqjph6gpnffp-r-clipr-0.8.0/library:/nix/store/snrqf9ckavnavhb6p45y69qgf3xd05qw-r-tzdb-0.3.0/library:/nix/store/lhsqwfihgvxc4jarj4d6s0cqcvxarf7x-r-vroom-1.6.1/library:/nix/store/21j10dsz49yl02yhp9q7bhan1rskzsjx-r-bit64-4.0.5/library:/nix/store/la4qwjg7hxj7d3zbind3j880q03h0zvq-r-bit-4.0.5/library:/nix/store/7w8n98was833p5bjski1qy3d8kng5989-r-progress-1.2.2/library:/nix/store/8p2wp506s08v6x3cxkv6qfx4a19m5d9q-r-prettyunits-1.1.1/library:/nix/store/71g8v713x3brdn12vg4lvpccn0zzcahl-r-lubridate-1.9.2/library:/nix/store/09agcq9pxlbnpij26d8s8b1gjdrc5b2v-r-timechange-0.2.0/library:/nix/store/sql5zb45jdaylfmikayk10h87arxfn91-r-modelr-0.1.11/library:/nix/store/dsgly74v0dzl6hj915ykxjkwli6vfxkn-r-ragg-1.2.5/library:/nix/store/cjy338kjs112sspia94ipvciqkmyg62i-r-systemfonts-1.0.4/library:/nix/store/wznxlr6crr74rh741hrwn5wy25s6fz6x-r-textshaping-0.3.6/library:/nix/store/7mspgd9sc6swqaq4g9y87d0fgl4cxc1d-r-readxl-1.4.2/library:/nix/store/7iq5g48azfhb995xnnwk925lncrcdxzb-r-reprex-2.0.2/library:/nix/store/3wp1ki3cdy9yb5bp5pixa7iqsi1syyqi-r-callr-3.7.3/library:/nix/store/592p1xahxd27g4031k28hxz378gipvyi-r-processx-3.8.0/library:/nix/store/y3sw1y7f1a03mxwj82n9z8an2psq2jpp-r-ps-1.7.4/library:/nix/store/6wy4s84byfggxfh5iqarz8c8dr15v5bw-r-knitr-1.42/library:/nix/store/9q8ks3wb30zsy2b4kvqilngsnwmbwxhl-r-evaluate-0.20/library:/nix/store/3ap2hh89j2j63li5rx7bvazqiy00waw0-r-highr-0.10/library:/nix/store/dcq8p5irzihlx754s68hj1sysn8ywa65-r-xfun-0.38/library:/nix/store/h22hsh4k99gh1a8pi0q10n05gl2ahn6w-r-rmarkdown-2.21/library:/nix/store/dizr48dnm7s16bcafpqwspi88i5pvdgi-r-bslib-0.4.2/library:/nix/store/2x39sl79c1qx9wbn0182l5fkmd8ajamz-r-base64enc-0.1-3/library:/nix/store/mg3m6h0hwblhkvd5a5di8ybmygznvw87-r-htmltools-0.5.5/library:/nix/store/0q5c879wibj2zwqsnydqld3n0gzgzvyw-r-digest-0.6.31/library:/nix/store/v5p0n4j1xnk2v0cxlp50bipjj7wsivz0-r-jquerylib-0.1.4/library:/nix/store/9f1ww789abvjxlhwn7l1fb2q7pkwizax-r-sass-0.4.5/library:/nix/store/0fjynnq0jjkhm5jfqihrhh5b0h1p5h7z-r-fontawesome-0.5.0/library:/nix/store/jssszlhli6kg8vnfb8ndj0vjg75040js-r-tinytex-0.44/library:/nix/store/6m06q29xaa1qrfxfawgm9k7r7238ihvb-r-rvest-1.0.3/library:/nix/store/bg3m9y3ywkwrchag2cbiviris541igc7-r-selectr-0.4-2/library:/nix/store/y4fnz6g0vi9cnza4f64izzag4yfy085n-r-xml2-1.3.3/library'
export R_LIBS_SITE
SIZE='size'
export SIZE
SOURCE_DATE_EPOCH='315532800'
export SOURCE_DATE_EPOCH
STRINGS='strings'
export STRINGS
STRIP='strip'
export STRIP
XDG_DATA_DIRS='/nix/store/gwf21xyl0x0bhgapi66avzf6qmddr44s-patchelf-0.15.0/share'
export XDG_DATA_DIRS
__structuredAttrs=''
export __structuredAttrs
buildInputs='/nix/store/wb72mw9wrksm44cvf0s64rn3cam9cwai-R-4.2.3 /nix/store/r6rg7g777b55vnf9n0i3kznwapra0b1m-r-GenomicRanges-1.50.2 /nix/store/v2csb61wlvjc6rf73xl13nyf86ij7rwm-r-doParallel-1.0.17 /nix/store/njkn98jsxzv896z9cck003xysahkfny4-r-plyranges-1.18.0 /nix/store/6bxwcawmyp0ss636yzi3fxzq0jxw425k-r-rtracklayer-1.58.0 /nix/store/agc6vihmxkj8vpz4kvpj5pcp93szxljw-r-tidyverse-2.0.0'
export buildInputs
buildPhase='{ echo "------------------------------------------------------------";
  echo " WARNING: the existence of this path is not guaranteed.";
  echo " It is an internal implementation detail for pkgs.mkShell.";
  echo "------------------------------------------------------------";
  echo;
  # Record all build inputs as runtime dependencies
  export;
} >> "$out"
'
export buildPhase
builder='/nix/store/0rwyq0j954a7143p0wzd4rhycny8i967-bash-5.2-p15/bin/bash'
export builder
cmakeFlags=''
export cmakeFlags
configureFlags=''
export configureFlags
defaultBuildInputs=''
defaultNativeBuildInputs='/nix/store/gwf21xyl0x0bhgapi66avzf6qmddr44s-patchelf-0.15.0 /nix/store/h9lc1dpi14z7is86ffhl3ld569138595-audit-tmpdir.sh /nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh /nix/store/wgrbkkaldkrlrni33ccvm3b6vbxzb656-make-symlinks-relative.sh /nix/store/5yzw0vhkyszf2d179m0qfkgxmp5wjjx4-move-docs.sh /nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh /nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh /nix/store/pag6l61paj1dc9sv15l7bm5c17xn5kyk-move-systemd-user-units.sh /nix/store/bxsly8a56yb8kyrq03s82a3vyc8fqrb3-multiple-outputs.sh /nix/store/nf1lkdrhapsx5lr6diyxyjr7pb7r20gr-patch-shebangs.sh /nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh /nix/store/xyff06pkhki3qy1ls77w10s0v79c9il0-reproducible-builds.sh /nix/store/ngg1cv31c8c7bcm2n8ww4g06nq7s4zhm-set-source-date-epoch-to-latest.sh /nix/store/a9ndjg0b1ivi0av9m93vfkrndp7fqbw1-strip.sh /nix/store/3hbxw05vfs6m1155xa6pvribs3bv777n-gcc-wrapper-12.2.0'
depsBuildBuild=''
export depsBuildBuild
depsBuildBuildPropagated=''
export depsBuildBuildPropagated
depsBuildTarget=''
export depsBuildTarget
depsBuildTargetPropagated=''
export depsBuildTargetPropagated
depsHostHost=''
export depsHostHost
depsHostHostPropagated=''
export depsHostHostPropagated
depsTargetTarget=''
export depsTargetTarget
depsTargetTargetPropagated=''
export depsTargetTargetPropagated
doCheck=''
export doCheck
doInstallCheck=''
export doInstallCheck
dontAddDisableDepTrack='1'
export dontAddDisableDepTrack
declare -a envBuildBuildHooks=()
declare -a envBuildHostHooks=()
declare -a envBuildTargetHooks=()
declare -a envHostHostHooks=('ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' )
declare -a envHostTargetHooks=('ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' )
declare -a envTargetTargetHooks=('addRLibPath' )
declare -a fixupOutputHooks=('if [ -z "${dontPatchELF-}" ]; then patchELF "$prefix"; fi' 'if [[ -z "${noAuditTmpdir-}" && -e "$prefix" ]]; then auditTmpdir "$prefix"; fi' 'if [ -z "${dontGzipMan-}" ]; then compressManPages "$prefix"; fi' '_moveLib64' '_moveSbin' '_moveSystemdUserUnits' 'patchShebangsAuto' '_pruneLibtoolFiles' '_doStrip' )
guess='16'
initialPath='/nix/store/w8vm09hri2zz7yacryzzzxvsapik4ps4-coreutils-9.1 /nix/store/4cxs4cigh2zdxvma52ygm3mh2igq70iw-findutils-4.9.0 /nix/store/vikpb6rhmi8zzgsx8syjng9dic8dplm7-diffutils-3.9 /nix/store/4mca20b13q88s6llkr8mc468rh9l9bmr-gnused-4.9 /nix/store/b4in4hmq54h6l34a0v6ha40z97c0lzw2-gnugrep-3.7 /nix/store/p7v8rc82yi4zngjw2z7isgqvfi32l1aj-gawk-5.2.1 /nix/store/2gcfy5f68y7gkryp3wrjmvlci42qb61a-gnutar-1.35 /nix/store/5xzh0z66hpcd3k578my76lx4qgra334q-gzip-1.12 /nix/store/6d9vlwwy7kvxjqmqg4cldgg9mr8nflff-bzip2-1.0.8-bin /nix/store/qlcm8dzsaa6wyycmx7in8rz6x3pzf6zf-gnumake-4.4.1 /nix/store/0rwyq0j954a7143p0wzd4rhycny8i967-bash-5.2-p15 /nix/store/0g52i0ih3h0d9s40m84gksi2jjm4k3bf-patch-2.7.6 /nix/store/agry2lhy6ilgyacx75w2ycqsdfwr513f-xz-5.4.3-bin /nix/store/rgg874xkzlfmkzkm7911dwnihswkf54g-file-5.44'
mesonFlags=''
export mesonFlags
name='nix-shell-env'
export name
nativeBuildInputs=''
export nativeBuildInputs
out='/data/home/fabian/Projects/NixOS/nixos-config/shells/r-env/outputs/out'
export out
outputBin='out'
outputDev='out'
outputDevdoc='REMOVE'
outputDevman='out'
outputDoc='out'
outputInclude='out'
outputInfo='out'
outputLib='out'
outputMan='out'
outputs='out'
export outputs
patches=''
export patches
phases='buildPhase'
export phases
pkg='/nix/store/3hbxw05vfs6m1155xa6pvribs3bv777n-gcc-wrapper-12.2.0'
declare -a pkgsBuildBuild=()
declare -a pkgsBuildHost=('/nix/store/gwf21xyl0x0bhgapi66avzf6qmddr44s-patchelf-0.15.0' '/nix/store/h9lc1dpi14z7is86ffhl3ld569138595-audit-tmpdir.sh' '/nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh' '/nix/store/wgrbkkaldkrlrni33ccvm3b6vbxzb656-make-symlinks-relative.sh' '/nix/store/5yzw0vhkyszf2d179m0qfkgxmp5wjjx4-move-docs.sh' '/nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh' '/nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh' '/nix/store/pag6l61paj1dc9sv15l7bm5c17xn5kyk-move-systemd-user-units.sh' '/nix/store/bxsly8a56yb8kyrq03s82a3vyc8fqrb3-multiple-outputs.sh' '/nix/store/nf1lkdrhapsx5lr6diyxyjr7pb7r20gr-patch-shebangs.sh' '/nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh' '/nix/store/xyff06pkhki3qy1ls77w10s0v79c9il0-reproducible-builds.sh' '/nix/store/ngg1cv31c8c7bcm2n8ww4g06nq7s4zhm-set-source-date-epoch-to-latest.sh' '/nix/store/a9ndjg0b1ivi0av9m93vfkrndp7fqbw1-strip.sh' '/nix/store/3hbxw05vfs6m1155xa6pvribs3bv777n-gcc-wrapper-12.2.0' '/nix/store/syp0507hrby53pprfi7n4wppms3b7ba2-binutils-wrapper-2.40' )
declare -a pkgsBuildTarget=()
declare -a pkgsHostHost=()
declare -a pkgsHostTarget=('/nix/store/wb72mw9wrksm44cvf0s64rn3cam9cwai-R-4.2.3' '/nix/store/r6rg7g777b55vnf9n0i3kznwapra0b1m-r-GenomicRanges-1.50.2' '/nix/store/7phnnbf3339z3d4w0hhkwslingkyw1hq-r-BiocGenerics-0.44.0' '/nix/store/1s4fk4v98wz6xrzgpflps40c9m923nlh-r-GenomeInfoDb-1.34.9' '/nix/store/97m55gx26ih10wwfxy9fvks1yk3brjqr-r-GenomeInfoDbData-1.2.9' '/nix/store/5lcr0xa6r8l8pv9abfsz2b99b7zbr078-r-IRanges-2.32.0' '/nix/store/yf5c5r2l3gqipqig3digqr7nvp4lbkcz-r-S4Vectors-0.36.2' '/nix/store/57wv3i8i9vxmj2d232rhpbw0qcygn50r-r-RCurl-1.98-1.12' '/nix/store/lvrb284rf4k3bcsfck6yi0c4lgifcnji-r-bitops-1.0-7' '/nix/store/ca0gn0vb74hz2gsxs7paxnwzbxgpksp2-r-XVector-0.38.0' '/nix/store/hyw8czlnvjfvfz635nl3szxrkmrajva3-r-zlibbioc-1.44.0' '/nix/store/v2csb61wlvjc6rf73xl13nyf86ij7rwm-r-doParallel-1.0.17' '/nix/store/xphmw9lknj95va9pabhs9d55cy6hq2fm-r-foreach-1.5.2' '/nix/store/f0bklhd4v4szprv8k9xhq49c3gwk5rdh-r-codetools-0.2-19' '/nix/store/gslj3fbfhygkx1p7bmvrl1mzcry6snbr-r-iterators-1.0.14' '/nix/store/gslj3fbfhygkx1p7bmvrl1mzcry6snbr-r-iterators-1.0.14' '/nix/store/njkn98jsxzv896z9cck003xysahkfny4-r-plyranges-1.18.0' '/nix/store/6mln4wxz44jq729qn6py7wkk4bs46bhb-r-dplyr-1.1.1' '/nix/store/78ylfww5n134i8dsb25qvs5923x8mc9g-r-cli-3.6.1' '/nix/store/dpv7cvdanpfhqvxbypgpvvl3d9nf12f1-r-generics-0.1.3' '/nix/store/87nf146mpv9wwbzy0bjl2dx9yiswg6xf-r-glue-1.6.2' '/nix/store/7l1pjy36v49v9j0gk78wxdsxk4vs8i6q-r-lifecycle-1.0.3' '/nix/store/087gcybpvdijyjrr0mzdxqdhz41jg6yd-r-rlang-1.1.0' '/nix/store/wsw0kjvz5iyvgpvc6i9y6a91gbzl956x-r-magrittr-2.0.3' '/nix/store/kidyhv9lqdynraxa1swnvcfkjhvlvdj1-r-pillar-1.9.0' '/nix/store/z178xl90fwd1fqsb4dgjqnqil9i742ar-r-fansi-1.0.4' '/nix/store/chdjg7k0qqhqf5h2m3wl7hfii27knwn8-r-utf8-1.2.3' '/nix/store/rk2ydwd7jpvm7mr2908q77jf5bay6760-r-vctrs-0.6.1' '/nix/store/8rfbiz2v1dahxbqjvadxhgsrwmpkmwgq-r-R6-2.5.1' '/nix/store/xjbfka0qw5plkzlkqhcmnmw2525y2m31-r-tibble-3.2.1' '/nix/store/0v0jcvz11s78mm0v2xz4783dyl7vw2wz-r-pkgconfig-2.0.3' '/nix/store/pr838svb7ys7vdp77h6iq60p9alf9lav-r-tidyselect-1.2.0' '/nix/store/cpm0j787mlljv62ydq271fcrqpfra06w-r-withr-2.5.0' '/nix/store/530p86g9dylqr3wfajr607zj8h06v0s2-r-GenomicAlignments-1.34.1' '/nix/store/ngfqssam8v3s24si7may9j78986d8ahy-r-BiocParallel-1.32.6' '/nix/store/vq2gwyqn6bcsdd3p40zjx1d07il69ghx-r-BH-1.81.0-1' '/nix/store/9dddh8hignyinfni43j7ygc0j3lbvp2v-r-cpp11-0.4.3' '/nix/store/k130sv89s8l3ya6ql5d62m7gs1ygmfb9-r-futile.logger-1.4.3' '/nix/store/vp1xinawm0xhk4pkf87x8dcyk7aqgkfk-r-futile.options-1.0.1' '/nix/store/w44icrf5c0wgfkgqfi5wbqca3334fzmx-r-lambda.r-1.2.4' '/nix/store/whjv79zj3fdiqq9av48b4xp1f0k6v25q-r-formatR-1.14' '/nix/store/aclpz71l0ph4x2r5crzh1fj751j315ip-r-snow-0.4-4' '/nix/store/25xxvm9zrz92qyiz5nnpaqf3npzl45j4-r-Biostrings-2.66.0' '/nix/store/jp4b5fjgbs944y3g651r50vsqgig2020-r-crayon-1.5.2' '/nix/store/5kxlkdvv3mvvymzlmjcgmk0fkr6cbapn-r-Rsamtools-2.14.0' '/nix/store/l5zflcc04fnbkk3cn3c7apac7r46jj79-r-Rhtslib-2.0.0' '/nix/store/s2waqj36sw7bxn8bm3chijdnisl0yqlk-r-SummarizedExperiment-1.28.0' '/nix/store/1j12p07qan4m2wmkv3m7363k9jcan52k-r-Biobase-2.58.0' '/nix/store/313qv3snr4j914v1hlsz8f0pyqd4airk-r-DelayedArray-0.24.0' '/nix/store/wdajm7mbws9asvmkhanws47icd8bwhwa-r-Matrix-1.5-4' '/nix/store/ligcnp3rv5rlrixr00zgcvyz7xqfqa6x-r-lattice-0.21-8' '/nix/store/y6pj1wifn03r338cnp1dfgzmzwvc5lbd-r-MatrixGenerics-1.10.0' '/nix/store/dy96sz80vsngr0lifs8xwh0qxx21xjx3-r-matrixStats-0.63.0' '/nix/store/6bxwcawmyp0ss636yzi3fxzq0jxw425k-r-rtracklayer-1.58.0' '/nix/store/zqqk703jhrxx01c7zvj7pvy1srd4zg21-r-BiocIO-1.8.0' '/nix/store/7fcg563q2f2njfs8r1r33fbv9q4rgwrm-r-restfulr-0.0.15' '/nix/store/vzs179p48h10v2jjm9j858kflcwni7z5-r-rjson-0.2.21' '/nix/store/zl3kvdii4y7vmrmmxv7mmlz3fznmxvi9-r-XML-3.99-0.14' '/nix/store/9s69hbgdx4ghrr3nl42fzpwz0b1jn38q-r-yaml-2.3.7' '/nix/store/agc6vihmxkj8vpz4kvpj5pcp93szxljw-r-tidyverse-2.0.0' '/nix/store/zmb5rzkfssnjlc0q0gh9k11i07yd8daa-r-broom-1.0.4' '/nix/store/cfkfajd0gda2lzg7q7hncv7iis972y47-r-backports-1.4.1' '/nix/store/p07gmj86a3i37qkhv6hpcykmf4asczbd-r-ellipsis-0.3.2' '/nix/store/a3cv0782vk0yn2k8a33ylpchidmp6y2v-r-purrr-1.0.1' '/nix/store/q2pvfnqybarwkk0rm0wxvj83s6f9v31m-r-stringr-1.5.0' '/nix/store/9rlygpnhn6qdl8cj6ag1lyqvhqqrqqf0-r-stringi-1.7.12' '/nix/store/p0jvpxzrars3vsr3pkv1jx154nhiy8zy-r-tidyr-1.3.0' '/nix/store/c3pkgaq7d90q1jcjs7n8wr7fj08q6ng7-r-conflicted-1.2.0' '/nix/store/p4nlq548fj10bkkd2bri6miiiyh3f7d8-r-memoise-2.0.1' '/nix/store/dxaqzklaa8zrlzwdq955nbapyp2bhbj1-r-cachem-1.0.7' '/nix/store/4ay5q821wcl6yifrc23jr9qc8mips9fw-r-fastmap-1.1.1' '/nix/store/va9mnl6b1k54k5ksgam560mx3xlsacnp-r-dbplyr-2.3.2' '/nix/store/mijw2axndmijrracqcz83zyw7m42sgb6-r-blob-1.2.4' '/nix/store/pa6ycgrc64vdd5jsrljpvfpm284z2xi5-r-DBI-1.1.3' '/nix/store/3sij3i326rcs0ms31bf3qgvb5gdk4v69-r-dtplyr-1.3.1' '/nix/store/idkzwglsk0hvmlpz9r5frmsyz5fkjgk6-r-data.table-1.14.8' '/nix/store/jkyjc40wpmqcm3djibnqmxpj10lw231y-r-forcats-1.0.0' '/nix/store/jhimw5g66lqrkdpjqss2dn4vcrrrh6mq-r-ggplot2-3.4.2' '/nix/store/cfc27d34lvr45j46nk50jc85l58rywmb-r-gtable-0.3.3' '/nix/store/643yiqgf123ygndabzfpsa5ybg4087c1-r-isoband-0.2.7' '/nix/store/zzq3m3z51nmryg6zx1r5h2ahl1sqhdgy-r-MASS-7.3-58.3' '/nix/store/iv7m86zs8ak8xqr2h9rs0mmrbxsridvc-r-mgcv-1.8-42' '/nix/store/xq7agmqvk03hmdqvs3f3gql36agvwh40-r-nlme-3.1-162' '/nix/store/r72vcxql65hwna0gn39zlpflsb8imdcr-r-scales-1.2.1' '/nix/store/512p9xkg4nckm2pql9sajgfami3fbxrx-r-farver-2.1.1' '/nix/store/5gcravmmcdvdqw5ba8mrk645w1d3as0l-r-labeling-0.4.2' '/nix/store/ypcxc5225pckzrhz7yid5sry2ax060l3-r-munsell-0.5.0' '/nix/store/6ykif6hkjdmwx9jzmgf0k4izxnl9fw7a-r-colorspace-2.1-0' '/nix/store/jqdp5r74zsxlcmv9zvkxskhyriyxm8jg-r-RColorBrewer-1.1-3' '/nix/store/2xzrmxjn8x6l2vql2h93fpyk3bn97j68-r-viridisLite-0.4.1' '/nix/store/68fdairwkmpv1680d7x4wm8536la9rgr-r-googledrive-2.1.0' '/nix/store/mxn295w33d6b656ch47vjai7651na99a-r-gargle-1.3.0' '/nix/store/0z999z6hxwr8ra5qhl630gc6n0p355bp-r-fs-1.6.1' '/nix/store/f10xrrvnpx22v23pwwkrs2fh9z8cddxv-r-httr-1.4.5' '/nix/store/kfq3rsm1f6m2nbf30xvmsa0yxmw5ja8z-r-curl-5.0.0' '/nix/store/7dzfb4a88n0d20d776jfwf50mxda40y0-r-jsonlite-1.8.4' '/nix/store/rrrr8qr8mr67rff5fn4x7n2b21fp2krq-r-mime-0.12' '/nix/store/ybksyzs32f67pgcpppf6xskxbzjd8n5d-r-openssl-2.0.6' '/nix/store/zbpaw78hnlfh2xvdqrs5zsn52mpsv3sa-r-askpass-1.1' '/nix/store/nz12y24yjqgy02ina6gksldimbvpcz6z-r-sys-3.4.1' '/nix/store/ln9pbraidj716dnbvsrjvfcy9did4316-r-rappdirs-0.3.3' '/nix/store/a1p6rnwlz1n01sikgj1ka9iwybf66g3w-r-rstudioapi-0.14' '/nix/store/ay6fkh045kjw8ir5nrhhyr1xblbwm36p-r-uuid-1.1-0' '/nix/store/1dhl070j7gq0nl9ld7icrspw2b9hqsnl-r-googlesheets4-1.1.0' '/nix/store/f49z6kp63hlfn48sw48jngii9ky2060r-r-cellranger-1.1.0' '/nix/store/bxkbvhck8cwkkbps5l6h8f9qcx6f90mm-r-rematch-1.0.1' '/nix/store/fgi9cii71x3p9q0x3cqlc6ad39ndj1hy-r-ids-1.0.1' '/nix/store/cq7xd806krcck5rdj6crb435ak2crjgk-r-rematch2-2.1.2' '/nix/store/c3cri4pjkzcfz71bv1sgfrq6jdh39i6v-r-haven-2.5.2' '/nix/store/zzv5s5vy299a4yrcszkzyrxr0nfwfxy7-r-hms-1.1.3' '/nix/store/dhac9dbd26m1jianvja6vs53jr7is8bp-r-readr-2.1.4' '/nix/store/j7da977bpmvs3q6g8i03aqjph6gpnffp-r-clipr-0.8.0' '/nix/store/snrqf9ckavnavhb6p45y69qgf3xd05qw-r-tzdb-0.3.0' '/nix/store/lhsqwfihgvxc4jarj4d6s0cqcvxarf7x-r-vroom-1.6.1' '/nix/store/21j10dsz49yl02yhp9q7bhan1rskzsjx-r-bit64-4.0.5' '/nix/store/la4qwjg7hxj7d3zbind3j880q03h0zvq-r-bit-4.0.5' '/nix/store/7w8n98was833p5bjski1qy3d8kng5989-r-progress-1.2.2' '/nix/store/8p2wp506s08v6x3cxkv6qfx4a19m5d9q-r-prettyunits-1.1.1' '/nix/store/71g8v713x3brdn12vg4lvpccn0zzcahl-r-lubridate-1.9.2' '/nix/store/09agcq9pxlbnpij26d8s8b1gjdrc5b2v-r-timechange-0.2.0' '/nix/store/sql5zb45jdaylfmikayk10h87arxfn91-r-modelr-0.1.11' '/nix/store/dsgly74v0dzl6hj915ykxjkwli6vfxkn-r-ragg-1.2.5' '/nix/store/cjy338kjs112sspia94ipvciqkmyg62i-r-systemfonts-1.0.4' '/nix/store/wznxlr6crr74rh741hrwn5wy25s6fz6x-r-textshaping-0.3.6' '/nix/store/7mspgd9sc6swqaq4g9y87d0fgl4cxc1d-r-readxl-1.4.2' '/nix/store/7iq5g48azfhb995xnnwk925lncrcdxzb-r-reprex-2.0.2' '/nix/store/3wp1ki3cdy9yb5bp5pixa7iqsi1syyqi-r-callr-3.7.3' '/nix/store/592p1xahxd27g4031k28hxz378gipvyi-r-processx-3.8.0' '/nix/store/y3sw1y7f1a03mxwj82n9z8an2psq2jpp-r-ps-1.7.4' '/nix/store/6wy4s84byfggxfh5iqarz8c8dr15v5bw-r-knitr-1.42' '/nix/store/9q8ks3wb30zsy2b4kvqilngsnwmbwxhl-r-evaluate-0.20' '/nix/store/3ap2hh89j2j63li5rx7bvazqiy00waw0-r-highr-0.10' '/nix/store/dcq8p5irzihlx754s68hj1sysn8ywa65-r-xfun-0.38' '/nix/store/dcq8p5irzihlx754s68hj1sysn8ywa65-r-xfun-0.38' '/nix/store/h22hsh4k99gh1a8pi0q10n05gl2ahn6w-r-rmarkdown-2.21' '/nix/store/dizr48dnm7s16bcafpqwspi88i5pvdgi-r-bslib-0.4.2' '/nix/store/2x39sl79c1qx9wbn0182l5fkmd8ajamz-r-base64enc-0.1-3' '/nix/store/mg3m6h0hwblhkvd5a5di8ybmygznvw87-r-htmltools-0.5.5' '/nix/store/0q5c879wibj2zwqsnydqld3n0gzgzvyw-r-digest-0.6.31' '/nix/store/v5p0n4j1xnk2v0cxlp50bipjj7wsivz0-r-jquerylib-0.1.4' '/nix/store/9f1ww789abvjxlhwn7l1fb2q7pkwizax-r-sass-0.4.5' '/nix/store/0fjynnq0jjkhm5jfqihrhh5b0h1p5h7z-r-fontawesome-0.5.0' '/nix/store/jssszlhli6kg8vnfb8ndj0vjg75040js-r-tinytex-0.44' '/nix/store/6m06q29xaa1qrfxfawgm9k7r7238ihvb-r-rvest-1.0.3' '/nix/store/bg3m9y3ywkwrchag2cbiviris541igc7-r-selectr-0.4-2' '/nix/store/y4fnz6g0vi9cnza4f64izzag4yfy085n-r-xml2-1.3.3' '/nix/store/y4fnz6g0vi9cnza4f64izzag4yfy085n-r-xml2-1.3.3' )
declare -a pkgsTargetTarget=()
declare -a postFixupHooks=('_makeSymlinksRelativeInAllOutputs' '_multioutPropagateDev' )
declare -a postUnpackHooks=('_updateSourceDateEpochFromSourceRoot' )
declare -a preConfigureHooks=('_multioutConfig' )
declare -a preFixupHooks=('_moveToShare' '_multioutDocs' '_multioutDevs' )
preferLocalBuild='1'
export preferLocalBuild
prefix='/data/home/fabian/Projects/NixOS/nixos-config/shells/r-env/outputs/out'
declare -a propagatedBuildDepFiles=('propagated-build-build-deps' 'propagated-native-build-inputs' 'propagated-build-target-deps' )
propagatedBuildInputs=''
export propagatedBuildInputs
declare -a propagatedHostDepFiles=('propagated-host-host-deps' 'propagated-build-inputs' )
propagatedNativeBuildInputs=''
export propagatedNativeBuildInputs
declare -a propagatedTargetDepFiles=('propagated-target-target-deps' )
shell='/nix/store/0rwyq0j954a7143p0wzd4rhycny8i967-bash-5.2-p15/bin/bash'
export shell
shellHook='	  	echo '\''nix flake with some R packages'\''
	  	echo on host: `hostname`
'
export shellHook
stdenv='/nix/store/gv2cl6qvvslz5h15vqd89f1rpvrdg5yc-stdenv-linux'
export stdenv
strictDeps=''
export strictDeps
system='x86_64-linux'
export system
declare -a unpackCmdHooks=('_defaultUnpack' )
_accumFlagsArray ()
{
 
    local name;
    if [ -n "$__structuredAttrs" ]; then
        for name in "$@";
        do
            local -n nameref="$name";
            flagsArray+=(${nameref+"${nameref[@]}"});
        done;
    else
        for name in "$@";
        do
            local -n nameref="$name";
            case "$name" in 
                *Array)
                    flagsArray+=(${nameref+"${nameref[@]}"})
                ;;
                *)
                    flagsArray+=(${nameref-})
                ;;
            esac;
        done;
    fi
}
_activatePkgs ()
{
 
    local hostOffset targetOffset;
    local pkg;
    for hostOffset in "${allPlatOffsets[@]}";
    do
        local pkgsVar="${pkgAccumVarVars[hostOffset + 1]}";
        for targetOffset in "${allPlatOffsets[@]}";
        do
            (( hostOffset <= targetOffset )) || continue;
            local pkgsRef="${pkgsVar}[$targetOffset - $hostOffset]";
            local pkgsSlice="${!pkgsRef}[@]";
            for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
            do
                activatePackage "$pkg" "$hostOffset" "$targetOffset";
            done;
        done;
    done
}
_addRpathPrefix ()
{
 
    if [ "${NIX_NO_SELF_RPATH:-0}" != 1 ]; then
        export NIX_LDFLAGS="-rpath $1/lib ${NIX_LDFLAGS-}";
        if [ -n "${NIX_LIB64_IN_SELF_RPATH:-}" ]; then
            export NIX_LDFLAGS="-rpath $1/lib64 ${NIX_LDFLAGS-}";
        fi;
        if [ -n "${NIX_LIB32_IN_SELF_RPATH:-}" ]; then
            export NIX_LDFLAGS="-rpath $1/lib32 ${NIX_LDFLAGS-}";
        fi;
    fi
}
_addToEnv ()
{
 
    local depHostOffset depTargetOffset;
    local pkg;
    for depHostOffset in "${allPlatOffsets[@]}";
    do
        local hookVar="${pkgHookVarVars[depHostOffset + 1]}";
        local pkgsVar="${pkgAccumVarVars[depHostOffset + 1]}";
        for depTargetOffset in "${allPlatOffsets[@]}";
        do
            (( depHostOffset <= depTargetOffset )) || continue;
            local hookRef="${hookVar}[$depTargetOffset - $depHostOffset]";
            if [[ -z "${strictDeps-}" ]]; then
                local visitedPkgs="";
                for pkg in "${pkgsBuildBuild[@]}" "${pkgsBuildHost[@]}" "${pkgsBuildTarget[@]}" "${pkgsHostHost[@]}" "${pkgsHostTarget[@]}" "${pkgsTargetTarget[@]}";
                do
                    if [[ "$visitedPkgs" = *"$pkg"* ]]; then
                        continue;
                    fi;
                    runHook "${!hookRef}" "$pkg";
                    visitedPkgs+=" $pkg";
                done;
            else
                local pkgsRef="${pkgsVar}[$depTargetOffset - $depHostOffset]";
                local pkgsSlice="${!pkgsRef}[@]";
                for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
                do
                    runHook "${!hookRef}" "$pkg";
                done;
            fi;
        done;
    done
}
_allFlags ()
{
 
    export system pname name version;
    for varName in $(awk 'BEGIN { for (v in ENVIRON) if (v ~ /^[a-z][a-zA-Z0-9_]*$/) print v }');
    do
        if (( "${NIX_DEBUG:-0}" >= 1 )); then
            printf "@%s@ -> %q\n" "${varName}" "${!varName}";
        fi;
        args+=("--subst-var" "$varName");
    done
}
_assignFirst ()
{
 
    local varName="$1";
    local _var;
    local REMOVE=REMOVE;
    shift;
    for _var in "$@";
    do
        if [ -n "${!_var-}" ]; then
            eval "${varName}"="${_var}";
            return;
        fi;
    done;
    echo;
    echo "error: _assignFirst: could not find a non-empty variable whose name to assign to ${varName}.";
    echo "       The following variables were all unset or empty:";
    echo "           $*";
    if [ -z "${out:-}" ]; then
        echo '       If you do not want an "out" output in your derivation, make sure to define';
        echo '       the other specific required outputs. This can be achieved by picking one';
        echo "       of the above as an output.";
        echo '       You do not have to remove "out" if you want to have a different default';
        echo '       output, because the first output is taken as a default.';
        echo;
    fi;
    return 1
}
_callImplicitHook ()
{
 
    local def="$1";
    local hookName="$2";
    if declare -F "$hookName" > /dev/null; then
        "$hookName";
    else
        if type -p "$hookName" > /dev/null; then
            source "$hookName";
        else
            if [ -n "${!hookName:-}" ]; then
                eval "${!hookName}";
            else
                return "$def";
            fi;
        fi;
    fi
}
_defaultUnpack ()
{
 
    local fn="$1";
    local destination;
    if [ -d "$fn" ]; then
        destination="$(stripHash "$fn")";
        if [ -e "$destination" ]; then
            echo "Cannot copy $fn to $destination: destination already exists!";
            echo "Did you specify two \"srcs\" with the same \"name\"?";
            return 1;
        fi;
        cp -pr --reflink=auto -- "$fn" "$destination";
    else
        case "$fn" in 
            *.tar.xz | *.tar.lzma | *.txz)
                xz -d < "$fn" | tar xf - --warning=no-timestamp
            ;;
            *.tar | *.tar.* | *.tgz | *.tbz2 | *.tbz)
                tar xf "$fn" --warning=no-timestamp
            ;;
            *)
                return 1
            ;;
        esac;
    fi
}
_doStrip ()
{
 
    local -ra flags=(dontStripHost dontStripTarget);
    local -ra debugDirs=(stripDebugList stripDebugListTarget);
    local -ra allDirs=(stripAllList stripAllListTarget);
    local -ra stripCmds=(STRIP STRIP_FOR_TARGET);
    local -ra ranlibCmds=(RANLIB RANLIB_FOR_TARGET);
    stripDebugList=${stripDebugList[*]:-lib lib32 lib64 libexec bin sbin};
    stripDebugListTarget=${stripDebugListTarget[*]:-};
    stripAllList=${stripAllList[*]:-};
    stripAllListTarget=${stripAllListTarget[*]:-};
    local i;
    for i in ${!stripCmds[@]};
    do
        local -n flag="${flags[$i]}";
        local -n debugDirList="${debugDirs[$i]}";
        local -n allDirList="${allDirs[$i]}";
        local -n stripCmd="${stripCmds[$i]}";
        local -n ranlibCmd="${ranlibCmds[$i]}";
        if [[ -n "${dontStrip-}" || -n "${flag-}" ]] || ! type -f "${stripCmd-}" 2> /dev/null 1>&2; then
            continue;
        fi;
        stripDirs "$stripCmd" "$ranlibCmd" "$debugDirList" "${stripDebugFlags[*]:--S -p}";
        stripDirs "$stripCmd" "$ranlibCmd" "$allDirList" "${stripAllFlags[*]:--s -p}";
    done
}
_eval ()
{
 
    if declare -F "$1" > /dev/null 2>&1; then
        "$@";
    else
        eval "$1";
    fi
}
_makeSymlinksRelative ()
{
 
    local symlinkTarget;
    if [ "${dontRewriteSymlinks-}" ] || [ ! -e "$prefix" ]; then
        return;
    fi;
    while IFS= read -r -d '' f; do
        symlinkTarget=$(readlink "$f");
        if [[ "$symlinkTarget"/ != "$prefix"/* ]]; then
            continue;
        fi;
        if [ ! -e "$symlinkTarget" ]; then
            echo "the symlink $f is broken, it points to $symlinkTarget (which is missing)";
        fi;
        echo "rewriting symlink $f to be relative to $prefix";
        ln -snrf "$symlinkTarget" "$f";
    done < <(find $prefix -type l -print0)
}
_makeSymlinksRelativeInAllOutputs ()
{
 
    local output;
    for output in $(getAllOutputNames);
    do
        prefix="${!output}" _makeSymlinksRelative;
    done
}
_moveLib64 ()
{
 
    if [ "${dontMoveLib64-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/lib64" -o -L "$prefix/lib64" ]; then
        return;
    fi;
    echo "moving $prefix/lib64/* to $prefix/lib";
    mkdir -p $prefix/lib;
    shopt -s dotglob;
    for i in $prefix/lib64/*;
    do
        mv --no-clobber "$i" $prefix/lib;
    done;
    shopt -u dotglob;
    rmdir $prefix/lib64;
    ln -s lib $prefix/lib64
}
_moveSbin ()
{
 
    if [ "${dontMoveSbin-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/sbin" -o -L "$prefix/sbin" ]; then
        return;
    fi;
    echo "moving $prefix/sbin/* to $prefix/bin";
    mkdir -p $prefix/bin;
    shopt -s dotglob;
    for i in $prefix/sbin/*;
    do
        mv "$i" $prefix/bin;
    done;
    shopt -u dotglob;
    rmdir $prefix/sbin;
    ln -s bin $prefix/sbin
}
_moveSystemdUserUnits ()
{
 
    if [ "${dontMoveSystemdUserUnits:-0}" = 1 ]; then
        return;
    fi;
    if [ ! -e "${prefix:?}/lib/systemd/user" ]; then
        return;
    fi;
    local source="$prefix/lib/systemd/user";
    local target="$prefix/share/systemd/user";
    echo "moving $source/* to $target";
    mkdir -p "$target";
    ( shopt -s dotglob;
    for i in "$source"/*;
    do
        mv "$i" "$target";
    done );
    rmdir "$source";
    ln -s "$target" "$source"
}
_moveToShare ()
{
 
    if [ -n "$__structuredAttrs" ]; then
        if [ -z "${forceShare-}" ]; then
            forceShare=(man doc info);
        fi;
    else
        forceShare=(${forceShare:-man doc info});
    fi;
    if [[ -z "$out" ]]; then
        return;
    fi;
    for d in "${forceShare[@]}";
    do
        if [ -d "$out/$d" ]; then
            if [ -d "$out/share/$d" ]; then
                echo "both $d/ and share/$d/ exist!";
            else
                echo "moving $out/$d to $out/share/$d";
                mkdir -p $out/share;
                mv $out/$d $out/share/;
            fi;
        fi;
    done
}
_multioutConfig ()
{
 
    if [ "$(getAllOutputNames)" = "out" ] || [ -z "${setOutputFlags-1}" ]; then
        return;
    fi;
    if [ -z "$shareDocName" ]; then
        local confScript="$configureScript";
        if [ -z "$confScript" ] && [ -x ./configure ]; then
            confScript=./configure;
        fi;
        if [ -f "$confScript" ]; then
            local shareDocName="$(sed -n "s/^PACKAGE_TARNAME='\(.*\)'$/\1/p" < "$confScript")";
        fi;
        if [ -z "$shareDocName" ] || echo "$shareDocName" | grep -q '[^a-zA-Z0-9_-]'; then
            shareDocName="$(echo "$name" | sed 's/-[^a-zA-Z].*//')";
        fi;
    fi;
    prependToVar configureFlags --bindir="${!outputBin}"/bin --sbindir="${!outputBin}"/sbin --includedir="${!outputInclude}"/include --oldincludedir="${!outputInclude}"/include --mandir="${!outputMan}"/share/man --infodir="${!outputInfo}"/share/info --docdir="${!outputDoc}"/share/doc/"${shareDocName}" --libdir="${!outputLib}"/lib --libexecdir="${!outputLib}"/libexec --localedir="${!outputLib}"/share/locale;
    prependToVar installFlags pkgconfigdir="${!outputDev}"/lib/pkgconfig m4datadir="${!outputDev}"/share/aclocal aclocaldir="${!outputDev}"/share/aclocal
}
_multioutDevs ()
{
 
    if [ "$(getAllOutputNames)" = "out" ] || [ -z "${moveToDev-1}" ]; then
        return;
    fi;
    moveToOutput include "${!outputInclude}";
    moveToOutput lib/pkgconfig "${!outputDev}";
    moveToOutput share/pkgconfig "${!outputDev}";
    moveToOutput lib/cmake "${!outputDev}";
    moveToOutput share/aclocal "${!outputDev}";
    for f in "${!outputDev}"/{lib,share}/pkgconfig/*.pc;
    do
        echo "Patching '$f' includedir to output ${!outputInclude}";
        sed -i "/^includedir=/s,=\${prefix},=${!outputInclude}," "$f";
    done
}
_multioutDocs ()
{
 
    local REMOVE=REMOVE;
    moveToOutput share/info "${!outputInfo}";
    moveToOutput share/doc "${!outputDoc}";
    moveToOutput share/gtk-doc "${!outputDevdoc}";
    moveToOutput share/devhelp/books "${!outputDevdoc}";
    moveToOutput share/man "${!outputMan}";
    moveToOutput share/man/man3 "${!outputDevman}"
}
_multioutPropagateDev ()
{
 
    if [ "$(getAllOutputNames)" = "out" ]; then
        return;
    fi;
    local outputFirst;
    for outputFirst in $(getAllOutputNames);
    do
        break;
    done;
    local propagaterOutput="$outputDev";
    if [ -z "$propagaterOutput" ]; then
        propagaterOutput="$outputFirst";
    fi;
    if [ -z "${propagatedBuildOutputs+1}" ]; then
        local po_dirty="$outputBin $outputInclude $outputLib";
        set +o pipefail;
        propagatedBuildOutputs=`echo "$po_dirty"             | tr -s ' ' '\n' | grep -v -F "$propagaterOutput"             | sort -u | tr '\n' ' ' `;
        set -o pipefail;
    fi;
    if [ -z "$propagatedBuildOutputs" ]; then
        return;
    fi;
    mkdir -p "${!propagaterOutput}"/nix-support;
    for output in $propagatedBuildOutputs;
    do
        echo -n " ${!output}" >> "${!propagaterOutput}"/nix-support/propagated-build-inputs;
    done
}
_overrideFirst ()
{
 
    if [ -z "${!1-}" ]; then
        _assignFirst "$@";
    fi
}
_pruneLibtoolFiles ()
{
 
    if [ "${dontPruneLibtoolFiles-}" ] || [ ! -e "$prefix" ]; then
        return;
    fi;
    find "$prefix" -type f -name '*.la' -exec grep -q '^# Generated by .*libtool' {} \; -exec grep -q "^old_library=''" {} \; -exec sed -i {} -e "/^dependency_libs='[^']/ c dependency_libs='' #pruned" \;
}
_updateSourceDateEpochFromSourceRoot ()
{
 
    if [ -n "$sourceRoot" ]; then
        updateSourceDateEpoch "$sourceRoot";
    fi
}
activatePackage ()
{
 
    local pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit 1;
    if [ -f "$pkg" ]; then
        source "$pkg";
    fi;
    if [[ -z "${strictDeps-}" || "$hostOffset" -le -1 ]]; then
        addToSearchPath _PATH "$pkg/bin";
    fi;
    if (( hostOffset <= -1 )); then
        addToSearchPath _XDG_DATA_DIRS "$pkg/share";
    fi;
    if [[ "$hostOffset" -eq 0 && -d "$pkg/bin" ]]; then
        addToSearchPath _HOST_PATH "$pkg/bin";
    fi;
    if [[ -f "$pkg/nix-support/setup-hook" ]]; then
        source "$pkg/nix-support/setup-hook";
    fi
}
addEnvHooks ()
{
 
    local depHostOffset="$1";
    shift;
    local pkgHookVarsSlice="${pkgHookVarVars[$depHostOffset + 1]}[@]";
    local pkgHookVar;
    for pkgHookVar in "${!pkgHookVarsSlice}";
    do
        eval "${pkgHookVar}s"'+=("$@")';
    done
}
addRLibPath ()
{
 
    if [[ -d "$1/library" ]]; then
        addToSearchPath R_LIBS_SITE "$1/library";
    fi
}
addToSearchPath ()
{
 
    addToSearchPathWithCustomDelimiter ":" "$@"
}
addToSearchPathWithCustomDelimiter ()
{
 
    local delimiter="$1";
    local varName="$2";
    local dir="$3";
    if [[ -d "$dir" && "${!varName:+${delimiter}${!varName}${delimiter}}" != *"${delimiter}${dir}${delimiter}"* ]]; then
        export "${varName}=${!varName:+${!varName}${delimiter}}${dir}";
    fi
}
appendToVar ()
{
 
    local -n nameref="$1";
    local useArray type;
    if [ -n "$__structuredAttrs" ]; then
        useArray=true;
    else
        useArray=false;
    fi;
    if declare -p "$1" 2> /dev/null | grep -q '^'; then
        type="$(declare -p "$1")";
        if [[ "$type" =~ "declare -A" ]]; then
            echo "appendToVar(): ERROR: trying to use appendToVar on an associative array, use variable+=([\"X\"]=\"Y\") instead." 1>&2;
            return 1;
        else
            if [[ "$type" =~ "declare -a" ]]; then
                useArray=true;
            else
                useArray=false;
            fi;
        fi;
    fi;
    shift;
    if $useArray; then
        nameref=(${nameref+"${nameref[@]}"} "$@");
    else
        nameref="${nameref-} $*";
    fi
}
auditTmpdir ()
{
 
    local dir="$1";
    [ -e "$dir" ] || return 0;
    echo "checking for references to $TMPDIR/ in $dir...";
    local i;
    find "$dir" -type f -print0 | while IFS= read -r -d '' i; do
        if [[ "$i" =~ .build-id ]]; then
            continue;
        fi;
        if isELF "$i"; then
            if { 
                printf :;
                patchelf --print-rpath "$i"
            } | grep -q -F ":$TMPDIR/"; then
                echo "RPATH of binary $i contains a forbidden reference to $TMPDIR/";
                exit 1;
            fi;
        fi;
        if isScript "$i"; then
            if [ -e "$(dirname "$i")/.$(basename "$i")-wrapped" ]; then
                if grep -q -F "$TMPDIR/" "$i"; then
                    echo "wrapper script $i contains a forbidden reference to $TMPDIR/";
                    exit 1;
                fi;
            fi;
        fi;
    done
}
bintoolsWrapper_addLDVars ()
{
 
    local role_post;
    getHostRoleEnvHook;
    if [[ -d "$1/lib64" && ! -L "$1/lib64" ]]; then
        export NIX_LDFLAGS${role_post}+=" -L$1/lib64";
    fi;
    if [[ -d "$1/lib" ]]; then
        local -a glob=($1/lib/lib*);
        if [ "${#glob[*]}" -gt 0 ]; then
            export NIX_LDFLAGS${role_post}+=" -L$1/lib";
        fi;
    fi
}
buildPhase ()
{
 
    runHook preBuild;
    if [[ -z "${makeFlags-}" && -z "${makefile:-}" && ! ( -e Makefile || -e makefile || -e GNUmakefile ) ]]; then
        echo "no Makefile or custom buildPhase, doing nothing";
    else
        foundMakefile=1;
        local flagsArray=(${enableParallelBuilding:+-j${NIX_BUILD_CORES}} SHELL=$SHELL);
        _accumFlagsArray makeFlags makeFlagsArray buildFlags buildFlagsArray;
        echoCmd 'build flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postBuild
}
ccWrapper_addCVars ()
{
 
    local role_post;
    getHostRoleEnvHook;
    if [ -d "$1/include" ]; then
        export NIX_CFLAGS_COMPILE${role_post}+=" -isystem $1/include";
    fi;
    if [ -d "$1/Library/Frameworks" ]; then
        export NIX_CFLAGS_COMPILE${role_post}+=" -iframework $1/Library/Frameworks";
    fi
}
checkPhase ()
{
 
    runHook preCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom checkPhase, doing nothing";
        runHook postCheck;
        return;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        if make -n ${makefile:+-f $makefile} check > /dev/null 2>&1; then
            checkTarget=check;
        else
            if make -n ${makefile:+-f $makefile} test > /dev/null 2>&1; then
                checkTarget=test;
            fi;
        fi;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        echo "no check/test target in ${makefile:-Makefile}, doing nothing";
    else
        local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES}} SHELL=$SHELL);
        _accumFlagsArray makeFlags makeFlagsArray;
        if [ -n "$__structuredAttrs" ]; then
            flagsArray+=("${checkFlags[@]:-VERBOSE=y}");
        else
            flagsArray+=(${checkFlags:-VERBOSE=y});
        fi;
        _accumFlagsArray checkFlagsArray;
        flagsArray+=(${checkTarget});
        echoCmd 'check flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postCheck
}
compressManPages ()
{
 
    local dir="$1";
    if [ -L "$dir"/share ] || [ -L "$dir"/share/man ] || [ ! -d "$dir/share/man" ]; then
        return;
    fi;
    echo "gzipping man pages under $dir/share/man/";
    find "$dir"/share/man/ -type f -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | while IFS= read -r -d '' f; do
        if gzip -c -n "$f" > "$f".gz; then
            rm "$f";
        else
            rm "$f".gz;
        fi;
    done;
    find "$dir"/share/man/ -type l -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | sort -z | while IFS= read -r -d '' f; do
        local target;
        target="$(readlink -f "$f")";
        if [ -f "$target".gz ]; then
            ln -sf "$target".gz "$f".gz && rm "$f";
        fi;
    done
}
configurePhase ()
{
 
    runHook preConfigure;
    : "${configureScript=}";
    if [[ -z "$configureScript" && -x ./configure ]]; then
        configureScript=./configure;
    fi;
    if [ -z "${dontFixLibtool:-}" ]; then
        export lt_cv_deplibs_check_method="${lt_cv_deplibs_check_method-pass_all}";
        local i;
        find . -iname "ltmain.sh" -print0 | while IFS='' read -r -d '' i; do
            echo "fixing libtool script $i";
            fixLibtool "$i";
        done;
        CONFIGURE_MTIME_REFERENCE=$(mktemp configure.mtime.reference.XXXXXX);
        find . -executable -type f -name configure -exec grep -l 'GNU Libtool is free software; you can redistribute it and/or modify' {} \; -exec touch -r {} "$CONFIGURE_MTIME_REFERENCE" \; -exec sed -i s_/usr/bin/file_file_g {} \; -exec touch -r "$CONFIGURE_MTIME_REFERENCE" {} \;;
        rm -f "$CONFIGURE_MTIME_REFERENCE";
    fi;
    if [[ -z "${dontAddPrefix:-}" && -n "$prefix" ]]; then
        prependToVar configureFlags "${prefixKey:---prefix=}$prefix";
    fi;
    if [[ -f "$configureScript" ]]; then
        if [ -z "${dontAddDisableDepTrack:-}" ]; then
            if grep -q dependency-tracking "$configureScript"; then
                prependToVar configureFlags --disable-dependency-tracking;
            fi;
        fi;
        if [ -z "${dontDisableStatic:-}" ]; then
            if grep -q enable-static "$configureScript"; then
                prependToVar configureFlags --disable-static;
            fi;
        fi;
    fi;
    if [ -n "$configureScript" ]; then
        local -a flagsArray;
        _accumFlagsArray configureFlags configureFlagsArray;
        echoCmd 'configure flags' "${flagsArray[@]}";
        $configureScript "${flagsArray[@]}";
        unset flagsArray;
    else
        echo "no configure script, doing nothing";
    fi;
    runHook postConfigure
}
consumeEntire ()
{
 
    if IFS='' read -r -d '' "$1"; then
        echo "consumeEntire(): ERROR: Input null bytes, won't process" 1>&2;
        return 1;
    fi
}
distPhase ()
{
 
    runHook preDist;
    local flagsArray=();
    _accumFlagsArray distFlags distFlagsArray;
    flagsArray+=(${distTarget:-dist});
    echo 'dist flags: %q' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    if [ "${dontCopyDist:-0}" != 1 ]; then
        mkdir -p "$out/tarballs";
        cp -pvd ${tarballs[*]:-*.tar.gz} "$out/tarballs";
    fi;
    runHook postDist
}
dumpVars ()
{
 
    if [ "${noDumpEnvVars:-0}" != 1 ]; then
        export 2> /dev/null >| "$NIX_BUILD_TOP/env-vars" || true;
    fi
}
echoCmd ()
{
 
    printf "%s:" "$1";
    shift;
    printf ' %q' "$@";
    echo
}
exitHandler ()
{
 
    exitCode="$?";
    set +e;
    if [ -n "${showBuildStats:-}" ]; then
        read -r -d '' -a buildTimes < <(times);
        echo "build times:";
        echo "user time for the shell             ${buildTimes[0]}";
        echo "system time for the shell           ${buildTimes[1]}";
        echo "user time for all child processes   ${buildTimes[2]}";
        echo "system time for all child processes ${buildTimes[3]}";
    fi;
    if (( "$exitCode" != 0 )); then
        runHook failureHook;
        if [ -n "${succeedOnFailure:-}" ]; then
            echo "build failed with exit code $exitCode (ignored)";
            mkdir -p "$out/nix-support";
            printf "%s" "$exitCode" > "$out/nix-support/failed";
            exit 0;
        fi;
    else
        runHook exitHook;
    fi;
    return "$exitCode"
}
findInputs ()
{
 
    local -r pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit 1;
    local varVar="${pkgAccumVarVars[hostOffset + 1]}";
    local varRef="$varVar[$((targetOffset - hostOffset))]";
    local var="${!varRef}";
    unset -v varVar varRef;
    local varSlice="$var[*]";
    case "${!varSlice-}" in 
        *" $pkg "*)
            return 0
        ;;
    esac;
    unset -v varSlice;
    eval "$var"'+=("$pkg")';
    if ! [ -e "$pkg" ]; then
        echo "build input $pkg does not exist" 1>&2;
        exit 1;
    fi;
    function mapOffset () 
    { 
        local -r inputOffset="$1";
        local -n outputOffset="$2";
        if (( inputOffset <= 0 )); then
            outputOffset=$((inputOffset + hostOffset));
        else
            outputOffset=$((inputOffset - 1 + targetOffset));
        fi
    };
    local relHostOffset;
    for relHostOffset in "${allPlatOffsets[@]}";
    do
        local files="${propagatedDepFilesVars[relHostOffset + 1]}";
        local hostOffsetNext;
        mapOffset "$relHostOffset" hostOffsetNext;
        (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
        local relTargetOffset;
        for relTargetOffset in "${allPlatOffsets[@]}";
        do
            (( "$relHostOffset" <= "$relTargetOffset" )) || continue;
            local fileRef="${files}[$relTargetOffset - $relHostOffset]";
            local file="${!fileRef}";
            unset -v fileRef;
            local targetOffsetNext;
            mapOffset "$relTargetOffset" targetOffsetNext;
            (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
            [[ -f "$pkg/nix-support/$file" ]] || continue;
            local pkgNext;
            read -r -d '' pkgNext < "$pkg/nix-support/$file" || true;
            for pkgNext in $pkgNext;
            do
                findInputs "$pkgNext" "$hostOffsetNext" "$targetOffsetNext";
            done;
        done;
    done
}
fixLibtool ()
{
 
    local search_path;
    for flag in $NIX_LDFLAGS;
    do
        case $flag in 
            -L*)
                search_path+=" ${flag#-L}"
            ;;
        esac;
    done;
    sed -i "$1" -e "s^eval \(sys_lib_search_path=\).*^\1'$search_path'^" -e 's^eval sys_lib_.+search_path=.*^^'
}
fixupPhase ()
{
 
    local output;
    for output in $(getAllOutputNames);
    do
        if [ -e "${!output}" ]; then
            chmod -R u+w "${!output}";
        fi;
    done;
    runHook preFixup;
    local output;
    for output in $(getAllOutputNames);
    do
        prefix="${!output}" runHook fixupOutput;
    done;
    recordPropagatedDependencies;
    if [ -n "${setupHook:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        substituteAll "$setupHook" "${!outputDev}/nix-support/setup-hook";
    fi;
    if [ -n "${setupHooks:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        local hook;
        for hook in ${setupHooks[@]};
        do
            local content;
            consumeEntire content < "$hook";
            substituteAllStream content "file '$hook'" >> "${!outputDev}/nix-support/setup-hook";
            unset -v content;
        done;
        unset -v hook;
    fi;
    if [ -n "${propagatedUserEnvPkgs:-}" ]; then
        mkdir -p "${!outputBin}/nix-support";
        printWords $propagatedUserEnvPkgs > "${!outputBin}/nix-support/propagated-user-env-packages";
    fi;
    runHook postFixup
}
genericBuild ()
{
 
    export GZIP_NO_TIMESTAMPS=1;
    if [ -f "${buildCommandPath:-}" ]; then
        source "$buildCommandPath";
        return;
    fi;
    if [ -n "${buildCommand:-}" ]; then
        eval "$buildCommand";
        return;
    fi;
    if [ -z "${phases[*]:-}" ]; then
        phases="${prePhases[*]:-} unpackPhase patchPhase ${preConfigurePhases[*]:-}             configurePhase ${preBuildPhases[*]:-} buildPhase checkPhase             ${preInstallPhases[*]:-} installPhase ${preFixupPhases[*]:-} fixupPhase installCheckPhase             ${preDistPhases[*]:-} distPhase ${postPhases[*]:-}";
    fi;
    for curPhase in ${phases[*]};
    do
        if [[ "$curPhase" = unpackPhase && -n "${dontUnpack:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = patchPhase && -n "${dontPatch:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = configurePhase && -n "${dontConfigure:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = buildPhase && -n "${dontBuild:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = checkPhase && -z "${doCheck:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = installPhase && -n "${dontInstall:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = fixupPhase && -n "${dontFixup:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = installCheckPhase && -z "${doInstallCheck:-}" ]]; then
            continue;
        fi;
        if [[ "$curPhase" = distPhase && -z "${doDist:-}" ]]; then
            continue;
        fi;
        if [[ -n $NIX_LOG_FD ]]; then
            echo "@nix { \"action\": \"setPhase\", \"phase\": \"$curPhase\" }" >&"$NIX_LOG_FD";
        fi;
        showPhaseHeader "$curPhase";
        dumpVars;
        local startTime=$(date +"%s");
        eval "${!curPhase:-$curPhase}";
        local endTime=$(date +"%s");
        showPhaseFooter "$curPhase" "$startTime" "$endTime";
        if [ "$curPhase" = unpackPhase ]; then
            [ -z "${sourceRoot}" ] || chmod +x "${sourceRoot}";
            cd "${sourceRoot:-.}";
        fi;
    done
}
getAllOutputNames ()
{
 
    if [ -n "$__structuredAttrs" ]; then
        echo "${!outputs[*]}";
    else
        echo "$outputs";
    fi
}
getHostRole ()
{
 
    getRole "$hostOffset"
}
getHostRoleEnvHook ()
{
 
    getRole "$depHostOffset"
}
getRole ()
{
 
    case $1 in 
        -1)
            role_post='_FOR_BUILD'
        ;;
        0)
            role_post=''
        ;;
        1)
            role_post='_FOR_TARGET'
        ;;
        *)
            echo "binutils-wrapper-2.40: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
getTargetRole ()
{
 
    getRole "$targetOffset"
}
getTargetRoleEnvHook ()
{
 
    getRole "$depTargetOffset"
}
getTargetRoleWrapper ()
{
 
    case $targetOffset in 
        -1)
            export NIX_BINTOOLS_WRAPPER_TARGET_BUILD_x86_64_unknown_linux_gnu=1
        ;;
        0)
            export NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu=1
        ;;
        1)
            export NIX_BINTOOLS_WRAPPER_TARGET_TARGET_x86_64_unknown_linux_gnu=1
        ;;
        *)
            echo "binutils-wrapper-2.40: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
installCheckPhase ()
{
 
    runHook preInstallCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom installCheckPhase, doing nothing";
    else
        if [[ -z "${installCheckTarget:-}" ]] && ! make -n ${makefile:+-f $makefile} "${installCheckTarget:-installcheck}" > /dev/null 2>&1; then
            echo "no installcheck target in ${makefile:-Makefile}, doing nothing";
        else
            local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES}} SHELL=$SHELL);
            _accumFlagsArray makeFlags makeFlagsArray installCheckFlags installCheckFlagsArray;
            flagsArray+=(${installCheckTarget:-installcheck});
            echoCmd 'installcheck flags' "${flagsArray[@]}";
            make ${makefile:+-f $makefile} "${flagsArray[@]}";
            unset flagsArray;
        fi;
    fi;
    runHook postInstallCheck
}
installPhase ()
{
 
    runHook preInstall;
    if [[ -z "${makeFlags-}" && -z "${makefile:-}" && ! ( -e Makefile || -e makefile || -e GNUmakefile ) ]]; then
        echo "no Makefile or custom installPhase, doing nothing";
        runHook postInstall;
        return;
    else
        foundMakefile=1;
    fi;
    if [ -n "$prefix" ]; then
        mkdir -p "$prefix";
    fi;
    local flagsArray=(${enableParallelInstalling:+-j${NIX_BUILD_CORES}} SHELL=$SHELL);
    _accumFlagsArray makeFlags makeFlagsArray installFlags installFlagsArray;
    if [ -n "$__structuredAttrs" ]; then
        flagsArray+=("${installTargets[@]:-install}");
    else
        flagsArray+=(${installTargets:-install});
    fi;
    echoCmd 'install flags' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    unset flagsArray;
    runHook postInstall
}
isELF ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [ "$magic" = 'ELF' ]; then
        return 0;
    else
        return 1;
    fi
}
isMachO ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xcf") || "$magic" = $(echo -ne "\xcf\xfa\xed\xfe") ]]; then
        return 0;
    else
        if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xce") || "$magic" = $(echo -ne "\xce\xfa\xed\xfe") ]]; then
            return 0;
        else
            if [[ "$magic" = $(echo -ne "\xca\xfe\xba\xbe") || "$magic" = $(echo -ne "\xbe\xba\xfe\xca") ]]; then
                return 0;
            else
                return 1;
            fi;
        fi;
    fi
}
isScript ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 2 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" =~ \#! ]]; then
        return 0;
    else
        return 1;
    fi
}
mapOffset ()
{
 
    local -r inputOffset="$1";
    local -n outputOffset="$2";
    if (( inputOffset <= 0 )); then
        outputOffset=$((inputOffset + hostOffset));
    else
        outputOffset=$((inputOffset - 1 + targetOffset));
    fi
}
moveToOutput ()
{
 
    local patt="$1";
    local dstOut="$2";
    local output;
    for output in $(getAllOutputNames);
    do
        if [ "${!output}" = "$dstOut" ]; then
            continue;
        fi;
        local srcPath;
        for srcPath in "${!output}"/$patt;
        do
            if [ ! -e "$srcPath" ] && [ ! -L "$srcPath" ]; then
                continue;
            fi;
            if [ "$dstOut" = REMOVE ]; then
                echo "Removing $srcPath";
                rm -r "$srcPath";
            else
                local dstPath="$dstOut${srcPath#${!output}}";
                echo "Moving $srcPath to $dstPath";
                if [ -d "$dstPath" ] && [ -d "$srcPath" ]; then
                    rmdir "$srcPath" --ignore-fail-on-non-empty;
                    if [ -d "$srcPath" ]; then
                        mv -t "$dstPath" "$srcPath"/*;
                        rmdir "$srcPath";
                    fi;
                else
                    mkdir -p "$(readlink -m "$dstPath/..")";
                    mv "$srcPath" "$dstPath";
                fi;
            fi;
            local srcParent="$(readlink -m "$srcPath/..")";
            if [ -n "$(find "$srcParent" -maxdepth 0 -type d -empty 2> /dev/null)" ]; then
                echo "Removing empty $srcParent/ and (possibly) its parents";
                rmdir -p --ignore-fail-on-non-empty "$srcParent" 2> /dev/null || true;
            fi;
        done;
    done
}
patchELF ()
{
 
    local dir="$1";
    [ -e "$dir" ] || return 0;
    echo "shrinking RPATHs of ELF executables and libraries in $dir";
    local i;
    while IFS= read -r -d '' i; do
        if [[ "$i" =~ .build-id ]]; then
            continue;
        fi;
        if ! isELF "$i"; then
            continue;
        fi;
        echo "shrinking $i";
        patchelf --shrink-rpath "$i" || true;
    done < <(find "$dir" -type f -print0)
}
patchPhase ()
{
 
    runHook prePatch;
    local -a patchesArray;
    if [ -n "$__structuredAttrs" ]; then
        patchesArray=(${patches:+"${patches[@]}"});
    else
        patchesArray=(${patches:-});
    fi;
    for i in "${patchesArray[@]}";
    do
        echo "applying patch $i";
        local uncompress=cat;
        case "$i" in 
            *.gz)
                uncompress="gzip -d"
            ;;
            *.bz2)
                uncompress="bzip2 -d"
            ;;
            *.xz)
                uncompress="xz -d"
            ;;
            *.lzma)
                uncompress="lzma -d"
            ;;
        esac;
        local -a flagsArray;
        if [ -n "$__structuredAttrs" ]; then
            flagsArray=("${patchFlags[@]:--p1}");
        else
            flagsArray=(${patchFlags:--p1});
        fi;
        $uncompress < "$i" 2>&1 | patch "${flagsArray[@]}";
    done;
    runHook postPatch
}
patchShebangs ()
{
 
    local pathName;
    if [[ "$1" == "--host" ]]; then
        pathName=HOST_PATH;
        shift;
    else
        if [[ "$1" == "--build" ]]; then
            pathName=PATH;
            shift;
        fi;
    fi;
    echo "patching script interpreter paths in $@";
    local f;
    local oldPath;
    local newPath;
    local arg0;
    local args;
    local oldInterpreterLine;
    local newInterpreterLine;
    if [[ $# -eq 0 ]]; then
        echo "No arguments supplied to patchShebangs" 1>&2;
        return 0;
    fi;
    local f;
    while IFS= read -r -d '' f; do
        isScript "$f" || continue;
        read -r oldInterpreterLine < "$f";
        read -r oldPath arg0 args <<< "${oldInterpreterLine:2}";
        if [[ -z "$pathName" ]]; then
            if [[ -n $strictDeps && $f == "$NIX_STORE"* ]]; then
                pathName=HOST_PATH;
            else
                pathName=PATH;
            fi;
        fi;
        if [[ "$oldPath" == *"/bin/env" ]]; then
            if [[ $arg0 == "-S" ]]; then
                arg0=${args%% *};
                args=${args#* };
                newPath="$(PATH="${!pathName}" command -v "env" || true)";
                args="-S $(PATH="${!pathName}" command -v "$arg0" || true) $args";
            else
                if [[ $arg0 == "-"* || $arg0 == *"="* ]]; then
                    echo "$f: unsupported interpreter directive \"$oldInterpreterLine\" (set dontPatchShebangs=1 and handle shebang patching yourself)" 1>&2;
                    exit 1;
                else
                    newPath="$(PATH="${!pathName}" command -v "$arg0" || true)";
                fi;
            fi;
        else
            if [[ -z $oldPath ]]; then
                oldPath="/bin/sh";
            fi;
            newPath="$(PATH="${!pathName}" command -v "$(basename "$oldPath")" || true)";
            args="$arg0 $args";
        fi;
        newInterpreterLine="$newPath $args";
        newInterpreterLine=${newInterpreterLine%${newInterpreterLine##*[![:space:]]}};
        if [[ -n "$oldPath" && "${oldPath:0:${#NIX_STORE}}" != "$NIX_STORE" ]]; then
            if [[ -n "$newPath" && "$newPath" != "$oldPath" ]]; then
                echo "$f: interpreter directive changed from \"$oldInterpreterLine\" to \"$newInterpreterLine\"";
                escapedInterpreterLine=${newInterpreterLine//\\/\\\\};
                timestamp=$(stat --printf "%y" "$f");
                sed -i -e "1 s|.*|#\!$escapedInterpreterLine|" "$f";
                touch --date "$timestamp" "$f";
            fi;
        fi;
    done < <(find "$@" -type f -perm -0100 -print0)
}
patchShebangsAuto ()
{
 
    if [[ -z "${dontPatchShebangs-}" && -e "$prefix" ]]; then
        if [[ "$output" != out && "$output" = "$outputDev" ]]; then
            patchShebangs --build "$prefix";
        else
            patchShebangs --host "$prefix";
        fi;
    fi
}
prependToVar ()
{
 
    local -n nameref="$1";
    local useArray type;
    if [ -n "$__structuredAttrs" ]; then
        useArray=true;
    else
        useArray=false;
    fi;
    if declare -p "$1" 2> /dev/null | grep -q '^'; then
        type="$(declare -p "$1")";
        if [[ "$type" =~ "declare -A" ]]; then
            echo "prependToVar(): ERROR: trying to use prependToVar on an associative array." 1>&2;
            return 1;
        else
            if [[ "$type" =~ "declare -a" ]]; then
                useArray=true;
            else
                useArray=false;
            fi;
        fi;
    fi;
    shift;
    if $useArray; then
        nameref=("$@" ${nameref+"${nameref[@]}"});
    else
        nameref="$* ${nameref-}";
    fi
}
printLines ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s\n' "$@"
}
printWords ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s ' "$@"
}
recordPropagatedDependencies ()
{
 
    declare -ra flatVars=(depsBuildBuildPropagated propagatedNativeBuildInputs depsBuildTargetPropagated depsHostHostPropagated propagatedBuildInputs depsTargetTargetPropagated);
    declare -ra flatFiles=("${propagatedBuildDepFiles[@]}" "${propagatedHostDepFiles[@]}" "${propagatedTargetDepFiles[@]}");
    local propagatedInputsIndex;
    for propagatedInputsIndex in "${!flatVars[@]}";
    do
        local propagatedInputsSlice="${flatVars[$propagatedInputsIndex]}[@]";
        local propagatedInputsFile="${flatFiles[$propagatedInputsIndex]}";
        [[ -n "${!propagatedInputsSlice}" ]] || continue;
        mkdir -p "${!outputDev}/nix-support";
        printWords ${!propagatedInputsSlice} > "${!outputDev}/nix-support/$propagatedInputsFile";
    done
}
runHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook;
    for hook in "_callImplicitHook 0 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        _eval "$hook" "$@";
    done;
    return 0
}
runOneHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook ret=1;
    for hook in "_callImplicitHook 1 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        if _eval "$hook" "$@"; then
            ret=0;
            break;
        fi;
    done;
    return "$ret"
}
showPhaseFooter ()
{
 
    local phase="$1";
    local startTime="$2";
    local endTime="$3";
    local delta=$(( endTime - startTime ));
    (( delta < 30 )) && return;
    local H=$((delta/3600));
    local M=$((delta%3600/60));
    local S=$((delta%60));
    echo -n "$phase completed in ";
    (( H > 0 )) && echo -n "$H hours ";
    (( M > 0 )) && echo -n "$M minutes ";
    echo "$S seconds"
}
showPhaseHeader ()
{
 
    local phase="$1";
    case "$phase" in 
        unpackPhase)
            echo "unpacking sources"
        ;;
        patchPhase)
            echo "patching sources"
        ;;
        configurePhase)
            echo "configuring"
        ;;
        buildPhase)
            echo "building"
        ;;
        checkPhase)
            echo "running tests"
        ;;
        installPhase)
            echo "installing"
        ;;
        fixupPhase)
            echo "post-installation fixup"
        ;;
        installCheckPhase)
            echo "running install tests"
        ;;
        *)
            echo "$phase"
        ;;
    esac
}
stripDirs ()
{
 
    local cmd="$1";
    local ranlibCmd="$2";
    local paths="$3";
    local stripFlags="$4";
    local pathsNew=;
    local p;
    for p in ${paths};
    do
        if [ -e "$prefix/$p" ]; then
            pathsNew="${pathsNew} $prefix/$p";
        fi;
    done;
    paths=${pathsNew};
    if [ -n "${paths}" ]; then
        echo "stripping (with command $cmd and flags $stripFlags) in $paths";
        find $paths -type f -a '!' -wholename "$prefix/lib/debug/*" -exec $cmd $stripFlags '{}' \; 2> /dev/null;
        find $paths -name '*.a' -type f -exec $ranlibCmd '{}' \; 2> /dev/null;
    fi
}
stripHash ()
{
 
    local strippedName casematchOpt=0;
    strippedName="$(basename -- "$1")";
    shopt -q nocasematch && casematchOpt=1;
    shopt -u nocasematch;
    if [[ "$strippedName" =~ ^[a-z0-9]{32}- ]]; then
        echo "${strippedName:33}";
    else
        echo "$strippedName";
    fi;
    if (( casematchOpt )); then
        shopt -s nocasematch;
    fi
}
substitute ()
{
 
    local input="$1";
    local output="$2";
    shift 2;
    if [ ! -f "$input" ]; then
        echo "substitute(): ERROR: file '$input' does not exist" 1>&2;
        return 1;
    fi;
    local content;
    consumeEntire content < "$input";
    if [ -e "$output" ]; then
        chmod +w "$output";
    fi;
    substituteStream content "file '$input'" "$@" > "$output"
}
substituteAll ()
{
 
    local input="$1";
    local output="$2";
    local -a args=();
    _allFlags;
    substitute "$input" "$output" "${args[@]}"
}
substituteAllInPlace ()
{
 
    local fileName="$1";
    shift;
    substituteAll "$fileName" "$fileName" "$@"
}
substituteAllStream ()
{
 
    local -a args=();
    _allFlags;
    substituteStream "$1" "$2" "${args[@]}"
}
substituteInPlace ()
{
 
    local -a fileNames=();
    for arg in "$@";
    do
        if [[ "$arg" = "--"* ]]; then
            break;
        fi;
        fileNames+=("$arg");
        shift;
    done;
    for file in "${fileNames[@]}";
    do
        substitute "$file" "$file" "$@";
    done
}
substituteStream ()
{
 
    local var=$1;
    local description=$2;
    shift 2;
    while (( "$#" )); do
        case "$1" in 
            --replace)
                pattern="$2";
                replacement="$3";
                shift 3;
                local savedvar;
                savedvar="${!var}";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}';
                if [ "$pattern" != "$replacement" ]; then
                    if [ "${!var}" == "$savedvar" ]; then
                        echo "substituteStream(): WARNING: pattern '$pattern' doesn't match anything in $description" 1>&2;
                    fi;
                fi
            ;;
            --subst-var)
                local varName="$2";
                shift 2;
                if ! [[ "$varName" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
                    echo "substituteStream(): ERROR: substitution variables must be valid Bash names, \"$varName\" isn't." 1>&2;
                    return 1;
                fi;
                if [ -z ${!varName+x} ]; then
                    echo "substituteStream(): ERROR: variable \$$varName is unset" 1>&2;
                    return 1;
                fi;
                pattern="@$varName@";
                replacement="${!varName}";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}'
            ;;
            --subst-var-by)
                pattern="@$2@";
                replacement="$3";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}';
                shift 3
            ;;
            *)
                echo "substituteStream(): ERROR: Invalid command line argument: $1" 1>&2;
                return 1
            ;;
        esac;
    done;
    printf "%s" "${!var}"
}
unpackFile ()
{
 
    curSrc="$1";
    echo "unpacking source archive $curSrc";
    if ! runOneHook unpackCmd "$curSrc"; then
        echo "do not know how to unpack source archive $curSrc";
        exit 1;
    fi
}
unpackPhase ()
{
 
    runHook preUnpack;
    if [ -z "${srcs:-}" ]; then
        if [ -z "${src:-}" ]; then
            echo 'variable $src or $srcs should point to the source';
            exit 1;
        fi;
        srcs="$src";
    fi;
    local -a srcsArray;
    if [ -n "$__structuredAttrs" ]; then
        srcsArray=("${srcs[@]}");
    else
        srcsArray=($srcs);
    fi;
    local dirsBefore="";
    for i in *;
    do
        if [ -d "$i" ]; then
            dirsBefore="$dirsBefore $i ";
        fi;
    done;
    for i in "${srcsArray[@]}";
    do
        unpackFile "$i";
    done;
    : "${sourceRoot=}";
    if [ -n "${setSourceRoot:-}" ]; then
        runOneHook setSourceRoot;
    else
        if [ -z "$sourceRoot" ]; then
            for i in *;
            do
                if [ -d "$i" ]; then
                    case $dirsBefore in 
                        *\ $i\ *)

                        ;;
                        *)
                            if [ -n "$sourceRoot" ]; then
                                echo "unpacker produced multiple directories";
                                exit 1;
                            fi;
                            sourceRoot="$i"
                        ;;
                    esac;
                fi;
            done;
        fi;
    fi;
    if [ -z "$sourceRoot" ]; then
        echo "unpacker appears to have produced no directories";
        exit 1;
    fi;
    echo "source root is $sourceRoot";
    if [ "${dontMakeSourcesWritable:-0}" != 1 ]; then
        chmod -R u+w -- "$sourceRoot";
    fi;
    runHook postUnpack
}
updateSourceDateEpoch ()
{
 
    local path="$1";
    local -a res=($(find "$path" -type f -not -newer "$NIX_BUILD_TOP/.." -printf '%T@ %p\0' | sort -n --zero-terminated | tail -n1 --zero-terminated | head -c -1));
    local time="${res[0]//\.[0-9]*/}";
    local newestFile="${res[1]}";
    if [ "${time:-0}" -gt "$SOURCE_DATE_EPOCH" ]; then
        echo "setting SOURCE_DATE_EPOCH to timestamp $time of file $newestFile";
        export SOURCE_DATE_EPOCH="$time";
        local now="$(date +%s)";
        if [ "$time" -gt $((now - 60)) ]; then
            echo "warning: file $newestFile may be generated; SOURCE_DATE_EPOCH may be non-deterministic";
        fi;
    fi
}
PATH="$PATH${nix_saved_PATH:+:$nix_saved_PATH}"
XDG_DATA_DIRS="$XDG_DATA_DIRS${nix_saved_XDG_DATA_DIRS:+:$nix_saved_XDG_DATA_DIRS}"
export NIX_BUILD_TOP="$(mktemp -d -t nix-shell.XXXXXX)"
export TMP="$NIX_BUILD_TOP"
export TMPDIR="$NIX_BUILD_TOP"
export TEMP="$NIX_BUILD_TOP"
export TEMPDIR="$NIX_BUILD_TOP"
eval "$shellHook"
